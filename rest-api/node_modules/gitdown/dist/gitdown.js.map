{"version":3,"sources":["../src/gitdown.js"],"names":["Gitdown","fs","require","path","Promise","_","marked","Deadlink","URLExtractor","MarkdownContents","StackTrace","gitinfo","contents","Parser","read","input","instanceConfig","instanceLogger","gitdown","parser","get","play","then","state","markdown","getConfig","headingNesting","enabled","nestHeadingIds","resolveURLs","replace","writeFile","fileName","outputString","writeFileSync","registerHelper","name","helper","executionContext","index","stackTrace","stackTraceLength","length","stackDirectory","dirname","getFileName","__dirname","Error","promises","urls","repositoryURL","compile","deadlink","extractUrls","SOURCE_TYPE_MARKDOWN","map","url","resolvedUrl","startsWith","substr","findDeadURLs","resolve","findDeadFragmentIdentifiers","getLogger","info","all","each","Resolution","error","fragmentIdentifier","URLResolution","warn","setLogger","logger","setConfig","config","isPlainObject","variable","isObject","scope","isBoolean","realpathSync","gitPath","defaultsDeep","baseDirectory","process","cwd","readFile","isAbsolute","readFileSync","encoding","directoryName","inputMarkdown","outputMarkdown","articles","codeblocks","match","push","level","normalizedName","normalizedLevel","trim","id","toLowerCase","slice","repeat","shift","tree","nestIds","iterateTree","article","callback","nextIndex","forEach","descendants","module","exports"],"mappings":"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","file":"gitdown.js","sourcesContent":["const Gitdown = {};\nconst fs = require('fs');\nconst path = require('path');\nconst Promise = require('bluebird');\nconst _ = require('lodash');\nconst marked = require('marked');\nconst Deadlink = require('deadlink');\nconst URLExtractor = require('url-extractor');\nconst MarkdownContents = require('markdown-contents');\nconst StackTrace = require('stack-trace');\nconst gitinfo = require('./helpers/gitinfo.js');\nconst contents = require('./helpers/contents.js');\nconst Parser = require('./parser.js');\n\n/**\n * @param {string} input Gitdown flavored markdown.\n */\nGitdown.read = (input) => {\n  let instanceConfig,\n    instanceLogger;\n\n  instanceConfig = {};\n\n  const gitdown = {};\n  const parser = Parser(gitdown);\n\n  /**\n   * Process template.\n   *\n   * @returns {Promise}\n   */\n  gitdown.get = () => {\n    return parser\n      .play(input)\n      .then((state) => {\n        let markdown;\n\n        markdown = state.markdown;\n\n        if (gitdown.getConfig().headingNesting.enabled) {\n          markdown = Gitdown.nestHeadingIds(markdown);\n        }\n\n        return gitdown\n              .resolveURLs(markdown)\n              .then(() => {\n                return markdown.replace(/<!--\\sgitdown:\\s(:?off|on)\\s-->/g, '');\n              });\n      });\n  };\n\n  /**\n   * Write processed template to a file.\n   *\n   * @param {string} fileName\n   * @returns {Promise}\n   */\n  gitdown.writeFile = (fileName) => {\n    return gitdown\n      .get()\n      .then((outputString) => {\n        return fs.writeFileSync(fileName, outputString);\n      });\n  };\n\n  /**\n   * @param {string} name\n   * @param {Object} helper\n   */\n  gitdown.registerHelper = (name, helper) => {\n    parser.registerHelper(name, helper);\n  };\n\n  /**\n   * Returns the first directory in the callstack that is not this directory.\n   *\n   * @private\n   * @returns {string} Path to the directory where Gitdown was invoked.\n   */\n  gitdown.executionContext = () => {\n    let index;\n\n    const stackTrace = StackTrace.get();\n    const stackTraceLength = stackTrace.length;\n\n    index = 0;\n\n    while (index++ < stackTraceLength) {\n      const stackDirectory = path.dirname(stackTrace[index].getFileName());\n\n      if (__dirname !== stackDirectory) {\n        return stackDirectory;\n      }\n    }\n\n    throw new Error('Execution context cannot be determined.');\n  };\n\n  /**\n   * @private\n   * @param {string} markdown\n   */\n  gitdown.resolveURLs = (markdown) => {\n    let promises,\n      urls;\n\n    const repositoryURL = gitinfo.compile({name: 'url'}, {gitdown}) + '/tree/' + gitinfo.compile({name: 'branch'}, {gitdown});\n    const deadlink = Deadlink();\n\n    urls = URLExtractor.extractUrls(markdown, URLExtractor.SOURCE_TYPE_MARKDOWN);\n\n    urls = urls.map((url) => {\n      let resolvedUrl;\n\n      // @todo What if it isn't /README.md?\n      // @todo Test.\n      if (_.startsWith(url, '#')) {\n        // Github is using JavaScript to resolve anchor tags under #uses-content- ID.\n        resolvedUrl = repositoryURL + '#user-content-' + url.substr(1);\n      } else {\n        resolvedUrl = url;\n      }\n\n      return resolvedUrl;\n    });\n\n    if (!urls.length || !gitdown.getConfig().deadlink.findDeadURLs) {\n      return Promise.resolve([]);\n    }\n\n    if (gitdown.getConfig().deadlink.findDeadFragmentIdentifiers) {\n      promises = deadlink.resolve(urls);\n    } else {\n      promises = deadlink.resolveURLs(urls);\n    }\n\n    gitdown.getLogger().info('Resolving URLs', urls);\n\n    return Promise\n      .all(promises)\n      .each((Resolution) => {\n        if (Resolution.error && Resolution.fragmentIdentifier && !(Resolution.error instanceof Deadlink.URLResolution && !Resolution.error.error)) {\n          // Ignore the fragment identifier error if resource resolution failed.\n          gitdown.getLogger().warn('Unresolved fragment identifier:', Resolution.url);\n        } else if (Resolution.error && !Resolution.fragmentIdentifier) {\n          gitdown.getLogger().warn('Unresolved URL:', Resolution.url);\n        } else if (Resolution.fragmentIdentifier) {\n          gitdown.getLogger().info('Resolved fragment identifier:', Resolution.url);\n        } else if (!Resolution.fragmentIdentifier) {\n          gitdown.getLogger().info('Resolved URL:', Resolution.url);\n        }\n      });\n  };\n\n  /**\n   * @param {Object} logger\n   */\n  gitdown.setLogger = (logger) => {\n    if (!logger.info) {\n      throw new Error('Logger must implement logger.info function.');\n    }\n\n    if (!logger.warn) {\n      throw new Error('Logger must implement logger.warn function.');\n    }\n\n    instanceLogger = {\n      info: logger.info,\n      warn: logger.warn\n    };\n  };\n\n  /**\n   * @returns {Object}\n   */\n  gitdown.getLogger = () => {\n    return instanceLogger;\n  };\n\n  /**\n   * @typedef {Object} config\n   * @property {}\n   */\n\n  /**\n   * @param {Object} config\n   * @returns {undefined}\n   */\n  gitdown.setConfig = (config) => {\n    if (!_.isPlainObject(config)) {\n      throw new Error('config must be a plain object.');\n    }\n\n    if (config.variable && !_.isObject(config.variable.scope)) {\n      throw new Error('config.variable.scope must be set and must be an object.');\n    }\n\n    if (config.deadlink && !_.isBoolean(config.deadlink.findDeadURLs)) {\n      throw new Error('config.deadlink.findDeadURLs must be set and must be a boolean value');\n    }\n\n    if (config.deadlink && !_.isBoolean(config.deadlink.findDeadFragmentIdentifiers)) {\n      throw new Error('config.deadlink.findDeadFragmentIdentifiers must be set and must be a boolean value');\n    }\n\n    if (config.gitinfo && !fs.realpathSync(config.gitinfo.gitPath)) {\n      throw new Error('config.gitinfo.gitPath must be set and must resolve an existing file path.');\n    }\n\n    instanceConfig = _.defaultsDeep(config, instanceConfig);\n  };\n\n  /**\n   * @returns {Object}\n   */\n  gitdown.getConfig = () => {\n    return instanceConfig;\n  };\n\n  gitdown.setConfig({\n    baseDirectory: process.cwd(),\n    deadlink: {\n      findDeadFragmentIdentifiers: false,\n      findDeadURLs: false\n    },\n    gitinfo: {\n      gitPath: gitdown.executionContext()\n    },\n    headingNesting: {\n      enabled: true\n    },\n    variable: {\n      scope: {}\n    }\n\n  });\n\n  return gitdown;\n};\n\n/**\n * Read input from a file.\n *\n * @param {string} fileName\n * @returns {Gitdown}\n */\nGitdown.readFile = (fileName) => {\n  if (!path.isAbsolute(fileName)) {\n    throw new Error('fileName must be an absolute path.');\n  }\n\n  const input = fs.readFileSync(fileName, {\n    encoding: 'utf8'\n  });\n\n  const gitdown = Gitdown.read(input);\n\n  const directoryName = path.dirname(fileName);\n\n  gitdown.setConfig({\n    baseDirectory: directoryName,\n    gitinfo: {\n      gitPath: directoryName\n    }\n  });\n\n  return gitdown;\n};\n\n/**\n * Iterates through each heading in the document (defined using markdown)\n * and prefixes heading ID using parent heading ID.\n *\n * @private\n * @param {string} inputMarkdown\n * @returns {string}\n */\nGitdown.nestHeadingIds = (inputMarkdown) => {\n  let outputMarkdown;\n\n  const articles = [];\n  const codeblocks = [];\n\n  outputMarkdown = inputMarkdown;\n\n  outputMarkdown = outputMarkdown.replace(/^```[\\s\\S]*?\\n```/mg, (match) => {\n    codeblocks.push(match);\n\n    return '⊂⊂⊂C:' + codeblocks.length + '⊃⊃⊃';\n  });\n\n  outputMarkdown = outputMarkdown.replace(/^(#+)(.*$)/mg, (match, level, name) => {\n    let normalizedName;\n\n    const normalizedLevel = level.length;\n\n    normalizedName = name.trim();\n\n    articles.push({\n      // `foo bar`\n      // -foo-bar-\n      // foo-bar\n      id: _.trim(normalizedName.toLowerCase().replace(/[^\\w]+/g, '-'), '-'),\n      level: normalizedLevel,\n      name: normalizedName\n    });\n\n    // `test`\n    normalizedName = _.trim(marked(normalizedName));\n    // <p><code>test</code></p>\n    normalizedName = normalizedName.slice(3, -4);\n    // <code>test</code>\n\n    return '<a name=\"⊂⊂⊂H:' + articles.length + '⊃⊃⊃\"></a>\\n' + _.repeat('#', normalizedLevel) + ' ' + normalizedName;\n  });\n\n  outputMarkdown = outputMarkdown.replace(/^⊂⊂⊂C:(\\d+)⊃⊃⊃/mg, () => {\n    return codeblocks.shift();\n  });\n\n  const tree = contents.nestIds(MarkdownContents.tree(articles));\n\n  Gitdown.nestHeadingIds.iterateTree(tree, (index, article) => {\n    outputMarkdown = outputMarkdown.replace('⊂⊂⊂H:' + index + '⊃⊃⊃', article.id);\n  });\n\n  return outputMarkdown;\n};\n\n/**\n * @private\n * @param {Array} tree\n * @param {Function} callback\n * @param {number} index\n */\nGitdown.nestHeadingIds.iterateTree = (tree, callback, index = 1) => {\n  let nextIndex;\n\n  nextIndex = index;\n\n  tree.forEach((article) => {\n    // eslint-disable-next-line callback-return\n    callback(nextIndex++, article);\n\n    if (article.descendants) {\n      nextIndex = Gitdown.nestHeadingIds.iterateTree(article.descendants, callback, nextIndex);\n    }\n  });\n\n  return nextIndex;\n};\n\nmodule.exports = Gitdown;\n"]}