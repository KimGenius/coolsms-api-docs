'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _trim = require('ramda/src/trim');

var _trim2 = _interopRequireDefault(_trim);

var cov_6k3htwzy9 = function () {
  var path = '/Users/gajus/Documents/dev/gajus/gitinfo/src/gitinfo.js',
      hash = 'e0dacfe1092647a1df2858343063844559f781d8',
      global = new Function('return this')(),
      gcv = '__coverage__',
      coverageData = {
    path: '/Users/gajus/Documents/dev/gajus/gitinfo/src/gitinfo.js',
    statementMap: {
      '0': {
        start: {
          line: 26,
          column: 18
        },
        end: {
          line: 26,
          column: 20
        }
      },
      '1': {
        start: {
          line: 28,
          column: 17
        },
        end: {
          line: 31,
          column: 3
        }
      },
      '2': {
        start: {
          line: 33,
          column: 18
        },
        end: {
          line: 39,
          column: 6
        }
      },
      '3': {
        start: {
          line: 34,
          column: 4
        },
        end: {
          line: 38,
          column: 5
        }
      },
      '4': {
        start: {
          line: 35,
          column: 6
        },
        end: {
          line: 35,
          column: 28
        }
      },
      '5': {
        start: {
          line: 37,
          column: 6
        },
        end: {
          line: 37,
          column: 41
        }
      },
      '6': {
        start: {
          line: 45,
          column: 2
        },
        end: {
          line: 47,
          column: 4
        }
      },
      '7': {
        start: {
          line: 54,
          column: 2
        },
        end: {
          line: 72,
          column: 4
        }
      },
      '8': {
        start: {
          line: 55,
          column: 17
        },
        end: {
          line: 55,
          column: 34
        }
      },
      '9': {
        start: {
          line: 62,
          column: 17
        },
        end: {
          line: 62,
          column: 58
        }
      },
      '10': {
        start: {
          line: 64,
          column: 19
        },
        end: {
          line: 64,
          column: 58
        }
      },
      '11': {
        start: {
          line: 78,
          column: 2
        },
        end: {
          line: 101,
          column: 4
        }
      },
      '12': {
        start: {
          line: 79,
          column: 23
        },
        end: {
          line: 79,
          column: 46
        }
      },
      '13': {
        start: {
          line: 80,
          column: 22
        },
        end: {
          line: 80,
          column: 41
        }
      },
      '14': {
        start: {
          line: 81,
          column: 19
        },
        end: {
          line: 82,
          column: 58
        }
      },
      '15': {
        start: {
          line: 91,
          column: 19
        },
        end: {
          line: 91,
          column: 62
        }
      },
      '16': {
        start: {
          line: 107,
          column: 2
        },
        end: {
          line: 109,
          column: 4
        }
      },
      '17': {
        start: {
          line: 115,
          column: 2
        },
        end: {
          line: 117,
          column: 4
        }
      },
      '18': {
        start: {
          line: 123,
          column: 2
        },
        end: {
          line: 125,
          column: 4
        }
      },
      '19': {
        start: {
          line: 131,
          column: 2
        },
        end: {
          line: 145,
          column: 4
        }
      },
      '20': {
        start: {
          line: 134,
          column: 19
        },
        end: {
          line: 134,
          column: 42
        }
      },
      '21': {
        start: {
          line: 135,
          column: 20
        },
        end: {
          line: 135,
          column: 63
        }
      },
      '22': {
        start: {
          line: 137,
          column: 4
        },
        end: {
          line: 142,
          column: 5
        }
      },
      '23': {
        start: {
          line: 138,
          column: 6
        },
        end: {
          line: 138,
          column: 57
        }
      },
      '24': {
        start: {
          line: 151,
          column: 2
        },
        end: {
          line: 153,
          column: 4
        }
      },
      '25': {
        start: {
          line: 155,
          column: 2
        },
        end: {
          line: 155,
          column: 17
        }
      }
    },
    fnMap: {
      '0': {
        name: '(anonymous_0)',
        decl: {
          start: {
            line: 25,
            column: 15
          },
          end: {
            line: 25,
            column: 16
          }
        },
        loc: {
          start: {
            line: 25,
            column: 56
          },
          end: {
            line: 156,
            column: 1
          }
        },
        line: 25
      },
      '1': {
        name: '(anonymous_1)',
        decl: {
          start: {
            line: 33,
            column: 19
          },
          end: {
            line: 33,
            column: 20
          }
        },
        loc: {
          start: {
            line: 33,
            column: 25
          },
          end: {
            line: 39,
            column: 3
          }
        },
        line: 33
      },
      '2': {
        name: '(anonymous_2)',
        decl: {
          start: {
            line: 45,
            column: 25
          },
          end: {
            line: 45,
            column: 26
          }
        },
        loc: {
          start: {
            line: 45,
            column: 39
          },
          end: {
            line: 47,
            column: 3
          }
        },
        line: 45
      },
      '3': {
        name: '(anonymous_3)',
        decl: {
          start: {
            line: 54,
            column: 26
          },
          end: {
            line: 54,
            column: 27
          }
        },
        loc: {
          start: {
            line: 54,
            column: 40
          },
          end: {
            line: 72,
            column: 3
          }
        },
        line: 54
      },
      '4': {
        name: '(anonymous_4)',
        decl: {
          start: {
            line: 78,
            column: 25
          },
          end: {
            line: 78,
            column: 26
          }
        },
        loc: {
          start: {
            line: 78,
            column: 39
          },
          end: {
            line: 101,
            column: 3
          }
        },
        line: 78
      },
      '5': {
        name: '(anonymous_5)',
        decl: {
          start: {
            line: 107,
            column: 23
          },
          end: {
            line: 107,
            column: 24
          }
        },
        loc: {
          start: {
            line: 107,
            column: 37
          },
          end: {
            line: 109,
            column: 3
          }
        },
        line: 107
      },
      '6': {
        name: '(anonymous_6)',
        decl: {
          start: {
            line: 115,
            column: 24
          },
          end: {
            line: 115,
            column: 25
          }
        },
        loc: {
          start: {
            line: 115,
            column: 38
          },
          end: {
            line: 117,
            column: 3
          }
        },
        line: 115
      },
      '7': {
        name: '(anonymous_7)',
        decl: {
          start: {
            line: 123,
            column: 20
          },
          end: {
            line: 123,
            column: 21
          }
        },
        loc: {
          start: {
            line: 123,
            column: 34
          },
          end: {
            line: 125,
            column: 3
          }
        },
        line: 123
      },
      '8': {
        name: '(anonymous_8)',
        decl: {
          start: {
            line: 131,
            column: 23
          },
          end: {
            line: 131,
            column: 24
          }
        },
        loc: {
          start: {
            line: 131,
            column: 37
          },
          end: {
            line: 145,
            column: 3
          }
        },
        line: 131
      },
      '9': {
        name: '(anonymous_9)',
        decl: {
          start: {
            line: 151,
            column: 22
          },
          end: {
            line: 151,
            column: 23
          }
        },
        loc: {
          start: {
            line: 151,
            column: 36
          },
          end: {
            line: 153,
            column: 3
          }
        },
        line: 151
      }
    },
    branchMap: {
      '0': {
        loc: {
          start: {
            line: 25,
            column: 16
          },
          end: {
            line: 25,
            column: 43
          }
        },
        type: 'default-arg',
        locations: [{
          start: {
            line: 25,
            column: 41
          },
          end: {
            line: 25,
            column: 43
          }
        }],
        line: 25
      },
      '1': {
        loc: {
          start: {
            line: 34,
            column: 4
          },
          end: {
            line: 38,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 34,
            column: 4
          },
          end: {
            line: 38,
            column: 5
          }
        }, {
          start: {
            line: 34,
            column: 4
          },
          end: {
            line: 38,
            column: 5
          }
        }],
        line: 34
      },
      '2': {
        loc: {
          start: {
            line: 81,
            column: 19
          },
          end: {
            line: 82,
            column: 58
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: 81,
            column: 19
          },
          end: {
            line: 81,
            column: 59
          }
        }, {
          start: {
            line: 82,
            column: 4
          },
          end: {
            line: 82,
            column: 58
          }
        }],
        line: 81
      }
    },
    s: {
      '0': 0,
      '1': 0,
      '2': 0,
      '3': 0,
      '4': 0,
      '5': 0,
      '6': 0,
      '7': 0,
      '8': 0,
      '9': 0,
      '10': 0,
      '11': 0,
      '12': 0,
      '13': 0,
      '14': 0,
      '15': 0,
      '16': 0,
      '17': 0,
      '18': 0,
      '19': 0,
      '20': 0,
      '21': 0,
      '22': 0,
      '23': 0,
      '24': 0,
      '25': 0
    },
    f: {
      '0': 0,
      '1': 0,
      '2': 0,
      '3': 0,
      '4': 0,
      '5': 0,
      '6': 0,
      '7': 0,
      '8': 0,
      '9': 0
    },
    b: {
      '0': [0],
      '1': [0, 0],
      '2': [0, 0]
    },
    _coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'
  },
      coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  coverageData.hash = hash;
  return coverage[path] = coverageData;
}();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _utils = require('./utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @property gitPath Path to the .git directory (default: __dirname).
 */
const TypeConfig = function () {
  function TypeConfig(input) {
    return input != null && (input.gitPath === undefined || typeof input.gitPath === 'string') && (input.defaultBranchName === undefined || typeof input.defaultBranchName === 'string');
  }

  ;
  Object.defineProperty(TypeConfig, Symbol.hasInstance, {
    value: function value(input) {
      return TypeConfig(input);
    }
  });
  return TypeConfig;
}();

/**
 * @access public
 * @name gitinfo
 */


exports.default = function () {
  let userConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (cov_6k3htwzy9.b[0][0]++, {});
  cov_6k3htwzy9.f[0]++;

  if (!TypeConfig(userConfig)) {
    throw new TypeError('Value of argument "userConfig" violates contract.\n\nExpected:\nTypeConfig\n\nGot:\n' + _inspect(userConfig));
  }

  const gitinfo = (cov_6k3htwzy9.s[0]++, {});

  const config = (cov_6k3htwzy9.s[1]++, _extends({
    gitPath: __dirname
  }, userConfig));

  const gitPath = (cov_6k3htwzy9.s[2]++, (() => {
    cov_6k3htwzy9.f[1]++;
    cov_6k3htwzy9.s[3]++;

    if ((0, _utils.isGitDirectory)(config.gitPath)) {
      cov_6k3htwzy9.b[1][0]++;
      cov_6k3htwzy9.s[4]++;

      return config.gitPath;
    } else {
      cov_6k3htwzy9.b[1][1]++;
      cov_6k3htwzy9.s[5]++;

      return (0, _utils.findGitPath)(config.gitPath);
    }
  })());

  /**
   * @access public
   * @returns GitHub repository URL.
   */
  cov_6k3htwzy9.s[6]++;
  gitinfo.getGithubUrl = () => {
    cov_6k3htwzy9.f[2]++;

    function _ref2(_id2) {
      if (!(typeof _id2 === 'string')) {
        throw new TypeError('Function return value violates contract.\n\nExpected:\nstring\n\nGot:\n' + _inspect(_id2));
      }

      return _id2;
    }

    return _ref2('https://github.com/' + gitinfo.getUsername() + '/' + gitinfo.getName());
  };

  /**
   * @see http://stackoverflow.com/a/12142066/368691
   * @access public
   * @returns Name of the current branch.
   */
  cov_6k3htwzy9.s[7]++;
  gitinfo.getBranchName = () => {
    cov_6k3htwzy9.f[3]++;

    function _ref3(_id3) {
      if (!(typeof _id3 === 'string')) {
        throw new TypeError('Function return value violates contract.\n\nExpected:\nstring\n\nGot:\n' + _inspect(_id3));
      }

      return _id3;
    }

    const name = (cov_6k3htwzy9.s[8]++, gitPath + '/HEAD');

    /* istanbul ignore next */
    if (!_fs2.default.existsSync(name)) {
      throw new Error('Git HEAD ("' + name + '") does not exist.');
    }

    const head = (cov_6k3htwzy9.s[9]++, _fs2.default.readFileSync(name, { encoding: 'utf8' }));

    const branch = (cov_6k3htwzy9.s[10]++, head.match(/^ref: refs\/heads\/(.*)$/m));

    /* istanbul ignore next */
    if (!branch) {
      throw new Error('Cannot get the current branch name.');
    }

    return _ref3(branch[1]);
  };

  /**
   * @access public
   * @returns Remote URL of the current branch.
   */
  cov_6k3htwzy9.s[11]++;
  gitinfo.getRemoteUrl = () => {
    cov_6k3htwzy9.f[4]++;

    function _ref4(_id4) {
      if (!(typeof _id4 === 'string')) {
        throw new TypeError('Function return value violates contract.\n\nExpected:\nstring\n\nGot:\n' + _inspect(_id4));
      }

      return _id4;
    }

    const branchName = (cov_6k3htwzy9.s[12]++, gitinfo.getBranchName());
    const gitConfig = (cov_6k3htwzy9.s[13]++, gitinfo.getConfig());
    const branch = (cov_6k3htwzy9.s[14]++, (cov_6k3htwzy9.b[2][0]++, gitConfig['branch "' + branchName + '"']) || (cov_6k3htwzy9.b[2][1]++, gitConfig['branch "' + config.defaultBranchName + '"']));

    /* istanbul ignore next */
    if (!branch) {
      throw new Error('Branch ("' + branchName + '") definition does not exist in the config.');
    } else if (!branch.remote) {
      throw new Error('Branch ("' + branchName + '") does not define "remote".');
    }

    const remote = (cov_6k3htwzy9.s[15]++, gitConfig['remote "' + branch.remote + '"']);

    /* istanbul ignore next */
    if (!remote) {
      throw new Error('Remote ("' + branch.remote + '") definition does not exist in the config.');
    } else if (!remote.url) {
      throw new Error('Remote ("' + branch.remote + '") does not define "url".');
    }

    return _ref4(remote.url);
  };

  /**
   * @access public
   * @returns Absolute path to the .git/ directory.
   */
  cov_6k3htwzy9.s[16]++;
  gitinfo.getGitPath = () => {
    cov_6k3htwzy9.f[5]++;

    function _ref5(_id5) {
      if (!(typeof _id5 === 'string')) {
        throw new TypeError('Function return value violates contract.\n\nExpected:\nstring\n\nGot:\n' + _inspect(_id5));
      }

      return _id5;
    }

    return _ref5(gitPath);
  };

  /**
   * @access public
   * @returns Username of the repository author.
   */
  cov_6k3htwzy9.s[17]++;
  gitinfo.getUsername = () => {
    cov_6k3htwzy9.f[6]++;

    function _ref6(_id6) {
      if (!(typeof _id6 === 'string')) {
        throw new TypeError('Function return value violates contract.\n\nExpected:\nstring\n\nGot:\n' + _inspect(_id6));
      }

      return _id6;
    }

    return _ref6((0, _utils.parseRemoteOriginUrl)(gitinfo.getRemoteUrl()).username);
  };

  /**
   * @access public
   * @returns Repository name.
   */
  cov_6k3htwzy9.s[18]++;
  gitinfo.getName = () => {
    cov_6k3htwzy9.f[7]++;

    function _ref7(_id7) {
      if (!(typeof _id7 === 'string')) {
        throw new TypeError('Function return value violates contract.\n\nExpected:\nstring\n\nGot:\n' + _inspect(_id7));
      }

      return _id7;
    }

    return _ref7((0, _utils.parseRemoteOriginUrl)(gitinfo.getRemoteUrl()).name);
  };

  /**
   * @access public
   * @returns Commit SHA of the current branch.
   */
  cov_6k3htwzy9.s[19]++;
  gitinfo.getHeadSha = () => {
    cov_6k3htwzy9.f[8]++;

    function _ref8(_id8) {
      if (!(typeof _id8 === 'string')) {
        throw new TypeError('Function return value violates contract.\n\nExpected:\nstring\n\nGot:\n' + _inspect(_id8));
      }

      return _id8;
    }

    let sha;

    const branch = (cov_6k3htwzy9.s[20]++, gitinfo.getBranchName());
    const shaFile = (cov_6k3htwzy9.s[21]++, _path2.default.join(gitPath, 'refs', 'heads', branch));

    cov_6k3htwzy9.s[22]++;
    try {
      cov_6k3htwzy9.s[23]++;

      sha = _fs2.default.readFileSync(shaFile, { encoding: 'utf8' });
    } catch (err) {
      /* istanbul ignore next */
      throw new Error('Cannot read the commit SHA of the current HEAD from the ' + shaFile + '.\n' + err);
    }

    return _ref8((0, _trim2.default)(sha));
  };

  /**
   * @access public
   * @returns Representation of the .git/config file.
   */
  cov_6k3htwzy9.s[24]++;
  gitinfo.getConfig = () => {
    cov_6k3htwzy9.f[9]++;

    function _ref9(_id9) {
      if (!(_id9 instanceof Object)) {
        throw new TypeError('Function return value violates contract.\n\nExpected:\nObject\n\nGot:\n' + _inspect(_id9));
      }

      return _id9;
    }

    return _ref9((0, _utils.parseIni)(gitPath + '/config'));
  };

  cov_6k3htwzy9.s[25]++;
  return gitinfo;
};

function _inspect(input, depth) {
  const maxDepth = 4;
  const maxKeys = 15;

  if (depth === undefined) {
    depth = 0;
  }

  depth += 1;

  if (input === null) {
    return 'null';
  } else if (input === undefined) {
    return 'void';
  } else if (typeof input === 'string' || typeof input === 'number' || typeof input === 'boolean') {
    return typeof input;
  } else if (Array.isArray(input)) {
    if (input.length > 0) {
      if (depth > maxDepth) return '[...]';

      const first = _inspect(input[0], depth);

      if (input.every(item => _inspect(item, depth) === first)) {
        return first.trim() + '[]';
      } else {
        return '[' + input.slice(0, maxKeys).map(item => _inspect(item, depth)).join(', ') + (input.length >= maxKeys ? ', ...' : '') + ']';
      }
    } else {
      return 'Array';
    }
  } else {
    const keys = Object.keys(input);

    if (!keys.length) {
      if (input.constructor && input.constructor.name && input.constructor.name !== 'Object') {
        return input.constructor.name;
      } else {
        return 'Object';
      }
    }

    if (depth > maxDepth) return '{...}';
    const indent = '  '.repeat(depth - 1);
    let entries = keys.slice(0, maxKeys).map(key => {
      return (/^([A-Z_$][A-Z0-9_$]*)$/i.test(key) ? key : JSON.stringify(key)) + ': ' + _inspect(input[key], depth) + ';';
    }).join('\n  ' + indent);

    if (keys.length >= maxKeys) {
      entries += '\n  ' + indent + '...';
    }

    if (input.constructor && input.constructor.name && input.constructor.name !== 'Object') {
      return input.constructor.name + ' {\n  ' + indent + entries + '\n' + indent + '}';
    } else {
      return '{\n  ' + indent + entries + '\n' + indent + '}';
    }
  }
}

module.exports = exports['default'];