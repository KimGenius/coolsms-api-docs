'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.findGitPath = exports.isGitDirectory = exports.parseRemoteOriginUrl = exports.parseIni = undefined;

var cov_1412r7lpko = function () {
  var path = '/Users/gajus/Documents/dev/gajus/gitinfo/src/utils.js',
      hash = '2bf0b12dc47284186cf087091a42ee0ee8a60ce4',
      global = new Function('return this')(),
      gcv = '__coverage__',
      coverageData = {
    path: '/Users/gajus/Documents/dev/gajus/gitinfo/src/utils.js',
    statementMap: {
      '0': {
        start: {
          line: 12,
          column: 24
        },
        end: {
          line: 24,
          column: 1
        }
      },
      '1': {
        start: {
          line: 20,
          column: 2
        },
        end: {
          line: 20,
          column: 53
        }
      },
      '2': {
        start: {
          line: 21,
          column: 2
        },
        end: {
          line: 21,
          column: 29
        }
      },
      '3': {
        start: {
          line: 38,
          column: 36
        },
        end: {
          line: 73,
          column: 1
        }
      },
      '4': {
        start: {
          line: 45,
          column: 2
        },
        end: {
          line: 56,
          column: 3
        }
      },
      '5': {
        start: {
          line: 46,
          column: 22
        },
        end: {
          line: 46,
          column: 38
        }
      },
      '6': {
        start: {
          line: 48,
          column: 4
        },
        end: {
          line: 53,
          column: 5
        }
      },
      '7': {
        start: {
          line: 49,
          column: 6
        },
        end: {
          line: 49,
          column: 36
        }
      },
      '8': {
        start: {
          line: 55,
          column: 4
        },
        end: {
          line: 55,
          column: 33
        }
      },
      '9': {
        start: {
          line: 58,
          column: 2
        },
        end: {
          line: 60,
          column: 3
        }
      },
      '10': {
        start: {
          line: 59,
          column: 4
        },
        end: {
          line: 59,
          column: 27
        }
      },
      '11': {
        start: {
          line: 62,
          column: 2
        },
        end: {
          line: 62,
          column: 23
        }
      },
      '12': {
        start: {
          line: 80,
          column: 30
        },
        end: {
          line: 91,
          column: 1
        }
      },
      '13': {
        start: {
          line: 81,
          column: 2
        },
        end: {
          line: 90,
          column: 3
        }
      },
      '14': {
        start: {
          line: 82,
          column: 4
        },
        end: {
          line: 82,
          column: 32
        }
      },
      '15': {
        start: {
          line: 83,
          column: 4
        },
        end: {
          line: 83,
          column: 35
        }
      },
      '16': {
        start: {
          line: 84,
          column: 4
        },
        end: {
          line: 84,
          column: 32
        }
      },
      '17': {
        start: {
          line: 85,
          column: 4
        },
        end: {
          line: 85,
          column: 34
        }
      },
      '18': {
        start: {
          line: 87,
          column: 4
        },
        end: {
          line: 87,
          column: 16
        }
      },
      '19': {
        start: {
          line: 89,
          column: 4
        },
        end: {
          line: 89,
          column: 17
        }
      },
      '20': {
        start: {
          line: 99,
          column: 27
        },
        end: {
          line: 121,
          column: 1
        }
      },
      '21': {
        start: {
          line: 103,
          column: 2
        },
        end: {
          line: 103,
          column: 22
        }
      },
      '22': {
        start: {
          line: 105,
          column: 2
        },
        end: {
          line: 113,
          column: 54
        }
      },
      '23': {
        start: {
          line: 106,
          column: 4
        },
        end: {
          line: 110,
          column: 5
        }
      },
      '24': {
        start: {
          line: 107,
          column: 6
        },
        end: {
          line: 107,
          column: 34
        }
      },
      '25': {
        start: {
          line: 109,
          column: 6
        },
        end: {
          line: 109,
          column: 12
        }
      },
      '26': {
        start: {
          line: 112,
          column: 4
        },
        end: {
          line: 112,
          column: 47
        }
      },
      '27': {
        start: {
          line: 120,
          column: 2
        },
        end: {
          line: 120,
          column: 17
        }
      }
    },
    fnMap: {
      '0': {
        name: '(anonymous_0)',
        decl: {
          start: {
            line: 12,
            column: 24
          },
          end: {
            line: 12,
            column: 25
          }
        },
        loc: {
          start: {
            line: 12,
            column: 50
          },
          end: {
            line: 24,
            column: 1
          }
        },
        line: 12
      },
      '1': {
        name: '(anonymous_1)',
        decl: {
          start: {
            line: 38,
            column: 36
          },
          end: {
            line: 38,
            column: 37
          }
        },
        loc: {
          start: {
            line: 38,
            column: 71
          },
          end: {
            line: 73,
            column: 1
          }
        },
        line: 38
      },
      '2': {
        name: '(anonymous_2)',
        decl: {
          start: {
            line: 80,
            column: 30
          },
          end: {
            line: 80,
            column: 31
          }
        },
        loc: {
          start: {
            line: 80,
            column: 57
          },
          end: {
            line: 91,
            column: 1
          }
        },
        line: 80
      },
      '3': {
        name: '(anonymous_3)',
        decl: {
          start: {
            line: 99,
            column: 27
          },
          end: {
            line: 99,
            column: 28
          }
        },
        loc: {
          start: {
            line: 99,
            column: 58
          },
          end: {
            line: 121,
            column: 1
          }
        },
        line: 99
      }
    },
    branchMap: {
      '0': {
        loc: {
          start: {
            line: 45,
            column: 2
          },
          end: {
            line: 56,
            column: 3
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 45,
            column: 2
          },
          end: {
            line: 56,
            column: 3
          }
        }, {
          start: {
            line: 45,
            column: 2
          },
          end: {
            line: 56,
            column: 3
          }
        }],
        line: 45
      },
      '1': {
        loc: {
          start: {
            line: 48,
            column: 4
          },
          end: {
            line: 53,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 48,
            column: 4
          },
          end: {
            line: 53,
            column: 5
          }
        }, {
          start: {
            line: 48,
            column: 4
          },
          end: {
            line: 53,
            column: 5
          }
        }],
        line: 48
      },
      '2': {
        loc: {
          start: {
            line: 48,
            column: 8
          },
          end: {
            line: 48,
            column: 35
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: 48,
            column: 8
          },
          end: {
            line: 48,
            column: 17
          }
        }, {
          start: {
            line: 48,
            column: 21
          },
          end: {
            line: 48,
            column: 35
          }
        }],
        line: 48
      },
      '3': {
        loc: {
          start: {
            line: 58,
            column: 2
          },
          end: {
            line: 60,
            column: 3
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 58,
            column: 2
          },
          end: {
            line: 60,
            column: 3
          }
        }, {
          start: {
            line: 58,
            column: 2
          },
          end: {
            line: 60,
            column: 3
          }
        }],
        line: 58
      },
      '4': {
        loc: {
          start: {
            line: 113,
            column: 11
          },
          end: {
            line: 113,
            column: 52
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: 113,
            column: 11
          },
          end: {
            line: 113,
            column: 33
          }
        }, {
          start: {
            line: 113,
            column: 37
          },
          end: {
            line: 113,
            column: 52
          }
        }],
        line: 113
      },
      '5': {
        loc: {
          start: {
            line: 106,
            column: 4
          },
          end: {
            line: 110,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 106,
            column: 4
          },
          end: {
            line: 110,
            column: 5
          }
        }, {
          start: {
            line: 106,
            column: 4
          },
          end: {
            line: 110,
            column: 5
          }
        }],
        line: 106
      }
    },
    s: {
      '0': 0,
      '1': 0,
      '2': 0,
      '3': 0,
      '4': 0,
      '5': 0,
      '6': 0,
      '7': 0,
      '8': 0,
      '9': 0,
      '10': 0,
      '11': 0,
      '12': 0,
      '13': 0,
      '14': 0,
      '15': 0,
      '16': 0,
      '17': 0,
      '18': 0,
      '19': 0,
      '20': 0,
      '21': 0,
      '22': 0,
      '23': 0,
      '24': 0,
      '25': 0,
      '26': 0,
      '27': 0
    },
    f: {
      '0': 0,
      '1': 0,
      '2': 0,
      '3': 0
    },
    b: {
      '0': [0, 0],
      '1': [0, 0],
      '2': [0, 0],
      '3': [0, 0],
      '4': [0, 0],
      '5': [0, 0]
    },
    _coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'
  },
      coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  coverageData.hash = hash;
  return coverage[path] = coverageData;
}();

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _url = require('url');

var _url2 = _interopRequireDefault(_url);

var _ini = require('ini');

var _ini2 = _interopRequireDefault(_ini);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Converts [INI](https://en.wikipedia.org/wiki/INI_file) string into an object.
 *
 * @access protected
 */
const parseIni = exports.parseIni = (cov_1412r7lpko.s[0]++, (name) => {
  cov_1412r7lpko.f[0]++;

  function _ref(_id) {
    if (!(_id instanceof Object)) {
      throw new TypeError('Function return value violates contract.\n\nExpected:\nObject\n\nGot:\n' + _inspect(_id));
    }

    return _id;
  }

  if (!(typeof name === 'string')) {
    throw new TypeError('Value of argument "name" violates contract.\n\nExpected:\nstring\n\nGot:\n' + _inspect(name));
  }

  let config;

  /* istanbul ignore next */
  if (!_fs2.default.existsSync(name)) {
    throw new Error('INI file ("' + name + '") does not exist.');
  }

  cov_1412r7lpko.s[1]++;
  config = _fs2.default.readFileSync(name, { encoding: 'utf8' });
  cov_1412r7lpko.s[2]++;
  config = _ini2.default.parse(config);

  return _ref(config);
});

const TypeRepository = function () {
  function TypeRepository(input) {
    return input != null && typeof input.username === 'string' && typeof input.name === 'string';
  }

  ;
  Object.defineProperty(TypeRepository, Symbol.hasInstance, {
    value: function value(input) {
      return TypeRepository(input);
    }
  });
  return TypeRepository;
}();

/**
 * Extracts information about the the repository from the
 * supplied URL (presumably, the remote origin URL).
 *
 * @access protected
 * @param input Supported Git remote origin URL (https, git or SVN).
 */


const parseRemoteOriginUrl = exports.parseRemoteOriginUrl = (cov_1412r7lpko.s[3]++, (input) => {
  cov_1412r7lpko.f[1]++;

  function _ref2(_id2) {
    if (!TypeRepository(_id2)) {
      throw new TypeError('Function return value violates contract.\n\nExpected:\nTypeRepository\n\nGot:\n' + _inspect(_id2));
    }

    return _id2;
  }

  if (!(typeof input === 'string')) {
    throw new TypeError('Value of argument "input" violates contract.\n\nExpected:\nstring\n\nGot:\n' + _inspect(input));
  }

  let url;

  // git@github.com:gajus/gitdown.git
  // https://github.com/gajus/gitdown.git
  // https://github.com/gajus/gitdown

  cov_1412r7lpko.s[4]++;
  if (input.indexOf('com:') === -1) {
    cov_1412r7lpko.b[0][0]++;

    const parsedUrl = (cov_1412r7lpko.s[5]++, _url2.default.parse(input));

    cov_1412r7lpko.s[6]++;
    if ((cov_1412r7lpko.b[2][0]++, parsedUrl) && (cov_1412r7lpko.b[2][1]++, parsedUrl.path)) {
      cov_1412r7lpko.b[1][0]++;
      cov_1412r7lpko.s[7]++;

      url = parsedUrl.path.slice(1);
    } else {
      cov_1412r7lpko.b[1][1]++;

      /* istanbul ignore next */
      throw new Error('Cannot parse origin URL.');
    }
  } else {
    cov_1412r7lpko.b[0][1]++;
    cov_1412r7lpko.s[8]++;

    url = input.split('com:')[1];
  }

  cov_1412r7lpko.s[9]++;
  if (/\.git$/.test(url)) {
    cov_1412r7lpko.b[3][0]++;
    cov_1412r7lpko.s[10]++;

    url = url.slice(0, -4);
  } else {
    cov_1412r7lpko.b[3][1]++;
  }

  cov_1412r7lpko.s[11]++;
  url = url.split('/');

  /* istanbul ignore next */
  if (url.length !== 2) {
    throw new Error('Invalid remote origin URL ("' + input + '").');
  }

  return _ref2({
    name: url[1],
    username: url[0]
  });
});

/**
 * Tells whether a supplied path is a .git directory.
 *
 * @access protected
 */
const isGitDirectory = exports.isGitDirectory = (cov_1412r7lpko.s[12]++, (path) => {
  cov_1412r7lpko.f[2]++;

  if (!(typeof path === 'string')) {
    throw new TypeError('Value of argument "path" violates contract.\n\nExpected:\nstring\n\nGot:\n' + _inspect(path));
  }

  cov_1412r7lpko.s[13]++;

  try {
    cov_1412r7lpko.s[14]++;

    _fs2.default.statSync(path + '/HEAD');
    cov_1412r7lpko.s[15]++;
    _fs2.default.statSync(path + '/objects');
    cov_1412r7lpko.s[16]++;
    _fs2.default.statSync(path + '/refs');
    cov_1412r7lpko.s[17]++;
    _fs2.default.statSync(path + '/config');

    cov_1412r7lpko.s[18]++;
    return true;
  } catch (error) {
    cov_1412r7lpko.s[19]++;

    return false;
  }
});

/**
 * Finds a .git directory by ascending the directory tree.
 *
 * @access protected
 * @param startPath The path where to start the search.
 */
const findGitPath = exports.findGitPath = (cov_1412r7lpko.s[20]++, (startPath) => {
  cov_1412r7lpko.f[3]++;

  if (!(typeof startPath === 'string')) {
    throw new TypeError('Value of argument "startPath" violates contract.\n\nExpected:\nstring\n\nGot:\n' + _inspect(startPath));
  }

  let dirname, gitpath;

  cov_1412r7lpko.s[21]++;
  dirname = startPath;

  cov_1412r7lpko.s[22]++;
  do {
    cov_1412r7lpko.s[23]++;

    if (_fs2.default.existsSync(dirname + '/.git')) {
      cov_1412r7lpko.b[5][0]++;
      cov_1412r7lpko.s[24]++;

      gitpath = dirname + '/.git';

      cov_1412r7lpko.s[25]++;
      break;
    } else {
      cov_1412r7lpko.b[5][1]++;
    }

    cov_1412r7lpko.s[26]++;
    dirname = _fs2.default.realpathSync(dirname + '/..');
  } while ((cov_1412r7lpko.b[4][0]++, _fs2.default.existsSync(dirname)) && (cov_1412r7lpko.b[4][1]++, dirname !== '/'));

  /* istanbul ignore next */
  if (!gitpath) {
    throw new Error('Cannot locate .git directory.');
  }

  cov_1412r7lpko.s[27]++;
  return gitpath;
});

function _inspect(input, depth) {
  const maxDepth = 4;
  const maxKeys = 15;

  if (depth === undefined) {
    depth = 0;
  }

  depth += 1;

  if (input === null) {
    return 'null';
  } else if (input === undefined) {
    return 'void';
  } else if (typeof input === 'string' || typeof input === 'number' || typeof input === 'boolean') {
    return typeof input;
  } else if (Array.isArray(input)) {
    if (input.length > 0) {
      if (depth > maxDepth) return '[...]';

      const first = _inspect(input[0], depth);

      if (input.every(item => _inspect(item, depth) === first)) {
        return first.trim() + '[]';
      } else {
        return '[' + input.slice(0, maxKeys).map(item => _inspect(item, depth)).join(', ') + (input.length >= maxKeys ? ', ...' : '') + ']';
      }
    } else {
      return 'Array';
    }
  } else {
    const keys = Object.keys(input);

    if (!keys.length) {
      if (input.constructor && input.constructor.name && input.constructor.name !== 'Object') {
        return input.constructor.name;
      } else {
        return 'Object';
      }
    }

    if (depth > maxDepth) return '{...}';
    const indent = '  '.repeat(depth - 1);
    let entries = keys.slice(0, maxKeys).map(key => {
      return (/^([A-Z_$][A-Z0-9_$]*)$/i.test(key) ? key : JSON.stringify(key)) + ': ' + _inspect(input[key], depth) + ';';
    }).join('\n  ' + indent);

    if (keys.length >= maxKeys) {
      entries += '\n  ' + indent + '...';
    }

    if (input.constructor && input.constructor.name && input.constructor.name !== 'Object') {
      return input.constructor.name + ' {\n  ' + indent + entries + '\n' + indent + '}';
    } else {
      return '{\n  ' + indent + entries + '\n' + indent + '}';
    }
  }
}