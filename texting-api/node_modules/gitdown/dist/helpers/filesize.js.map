{"version":3,"sources":["../../src/helpers/filesize.js"],"names":["fs","require","zlib","Promise","formatFileSize","helper","compile","config","gzip","file","reject","Error","then","fileSize","format","resolve","existsSync","console","log","readFile","err","buf","zlibErr","data","length","stat","size","bytes","weight","module","exports"],"mappings":";;AAAA,MAAMA,KAAKC,QAAQ,IAAR,CAAX;AACA,MAAMC,OAAOD,QAAQ,MAAR,CAAb;AACA,MAAME,UAAUF,QAAQ,UAAR,CAAhB;AACA,MAAMG,iBAAiBH,QAAQ,UAAR,CAAvB;;AAEA,MAAMI,SAAS,EAAf;;AAEAA,OAAOC,OAAP,GAAiB,YAAiB;AAAA,MAAhBC,MAAgB,yDAAP,EAAO;;AAChCA,SAAOC,IAAP,GAAcD,OAAOC,IAAP,IAAe,KAA7B;;AAEA,MAAI,CAACD,OAAOE,IAAZ,EAAkB;AAChB,WAAON,QAAQO,MAAR,CAAe,IAAIC,KAAJ,CAAU,+BAAV,CAAf,CAAP;AACD;;AAED,SAAON,OACAI,IADA,CACKF,OAAOE,IADZ,EACkBF,OAAOC,IADzB,EAEAI,IAFA,CAEMC,QAAD,IAAc;AAClB,WAAOR,OAAOS,MAAP,CAAcD,QAAd,CAAP;AACD,GAJA,CAAP;AAKD,CAZD;;AAcA;;;;;;;;AAQAR,OAAOI,IAAP,GAAc,CAACA,IAAD,EAAOD,IAAP,KAAgB;AAC5B,SAAO,IAAIL,OAAJ,CAAY,CAACY,OAAD,EAAUL,MAAV,KAAqB;AACtC,QAAI,CAACV,GAAGgB,UAAH,CAAcP,IAAd,CAAL,EAA0B;AACxB;AACAQ,cAAQC,GAAR,CAAY,MAAZ,EAAoBT,IAApB;;AAEAC,aAAO,IAAIC,KAAJ,CAAU,4BAAV,CAAP;;AAEA;AACD;;AAED,QAAIH,IAAJ,EAAU;AACRR,SAAGmB,QAAH,CAAYV,IAAZ,EAAkB,CAACW,GAAD,EAAMC,GAAN,KAAc;AAC9B,YAAID,GAAJ,EAAS;AACP,gBAAM,IAAIT,KAAJ,CAAUS,GAAV,CAAN;AACD;;AAEDlB,aAAKM,IAAL,CAAUa,GAAV,EAAe,CAACC,OAAD,EAAUC,IAAV,KAAmB;AAChC,cAAID,OAAJ,EAAa;AACX,kBAAM,IAAIX,KAAJ,CAAUW,OAAV,CAAN;AACD;;AAEDP,kBAAQQ,KAAKC,MAAb;AACD,SAND;AAOD,OAZD;AAaD,KAdD,MAcO;AACLxB,SAAGyB,IAAH,CAAQhB,IAAR,EAAc,CAACW,GAAD,EAAMG,IAAN,KAAe;AAC3B,YAAIH,GAAJ,EAAS;AACP,gBAAM,IAAIT,KAAJ,CAAUS,GAAV,CAAN;AACD;;AAEDL,gBAAQQ,KAAKG,IAAb;AACD,OAND;AAOD;AACF,GAjCM,CAAP;AAkCD,CAnCD;;AAqCA;;;;;;AAMArB,OAAOS,MAAP,GAAiBa,KAAD,IAAW;AACzB,SAAOvB,eAAeuB,KAAf,CAAP;AACD,CAFD;;AAIAtB,OAAOuB,MAAP,GAAgB,EAAhB;;AAEAC,OAAOC,OAAP,GAAiBzB,MAAjB","file":"filesize.js","sourcesContent":["const fs = require('fs');\nconst zlib = require('zlib');\nconst Promise = require('bluebird');\nconst formatFileSize = require('filesize');\n\nconst helper = {};\n\nhelper.compile = (config = {}) => {\n  config.gzip = config.gzip || false;\n\n  if (!config.file) {\n    return Promise.reject(new Error('config.file must be provided.'));\n  }\n\n  return helper\n        .file(config.file, config.gzip)\n        .then((fileSize) => {\n          return helper.format(fileSize);\n        });\n};\n\n/**\n * Calculates size of a file. If gzip parameter is true,\n * calculates the gzipped size of a file.\n *\n * @private\n * @param {string} file\n * @param {boolean} gzip\n */\nhelper.file = (file, gzip) => {\n  return new Promise((resolve, reject) => {\n    if (!fs.existsSync(file)) {\n      // eslint-disable-next-line no-console\n      console.log('file', file);\n\n      reject(new Error('Input file does not exist.'));\n\n      return;\n    }\n\n    if (gzip) {\n      fs.readFile(file, (err, buf) => {\n        if (err) {\n          throw new Error(err);\n        }\n\n        zlib.gzip(buf, (zlibErr, data) => {\n          if (zlibErr) {\n            throw new Error(zlibErr);\n          }\n\n          resolve(data.length);\n        });\n      });\n    } else {\n      fs.stat(file, (err, data) => {\n        if (err) {\n          throw new Error(err);\n        }\n\n        resolve(data.size);\n      });\n    }\n  });\n};\n\n/**\n * Formats size in bytes to a human friendly format.\n *\n * @private\n * @param {number} bytes\n */\nhelper.format = (bytes) => {\n  return formatFileSize(bytes);\n};\n\nhelper.weight = 10;\n\nmodule.exports = helper;\n"]}