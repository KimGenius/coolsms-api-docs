{"version":3,"sources":["../../src/bin/index.js"],"names":["path","require","fs","_","yargs","argv","usage","demand","options","force","default","describe","type","example","wrap","check","sargv","startsWith","Error","outputFile","inputFile","resolve","process","cwd","accessSync","constants","W_OK","error","console","log","outputFileExtension","extname","toLowerCase","outputFileExists","strict","resolvedInputFile","resolvedOutputFile","Gitdown","gitdown","readFile","writeFile"],"mappings":";;AAEA,MAAMA,OAAOC,QAAQ,MAAR,CAAb;AACA,MAAMC,KAAKD,QAAQ,IAAR,CAAX;AACA,MAAME,IAAIF,QAAQ,QAAR,CAAV;AACA,MAAMG,QAAQH,QAAQ,OAAR,CAAd;;AAMA,MAAMI,OAAOD,MACRE,KADQ,CACF,iCADE,EAERC,MAFQ,CAED,CAFC,EAEE,CAFF,EAEK,wEAFL,EAGRC,OAHQ,CAGA;AACPC,SAAO;AACLC,aAAS,KADJ;AAELH,YAAQ,KAFH;AAGLI,cAAU,oDAHL;AAILC,UAAM;AAJD,GADA;AAOP,iBAAe;AACbL,YAAQ,IADK;AAEbI,cAAU,0BAFG;AAGbC,UAAM;AAHO;AAPR,CAHA,EAgBRC,OAhBQ,CAgBA,kDAhBA,EAiBRA,OAjBQ,CAiBA,2DAjBA,EAkBRC,IAlBQ,CAkBH,IAlBG,EAmBRC,KAnBQ,CAmBDC,KAAD,IAAW;AAChB,MAAI,CAACb,EAAEc,UAAF,CAAaD,MAAMb,CAAN,CAAQ,CAAR,CAAb,EAAyB,IAAzB,CAAL,EAAqC;AACnC,UAAM,IAAIe,KAAJ,CAAU,oFAAV,CAAN;AACD;;AAED,MAAI,CAACf,EAAEc,UAAF,CAAaD,MAAMG,UAAnB,EAA+B,IAA/B,CAAL,EAA2C;AACzC,UAAM,IAAID,KAAJ,CAAU,qFAAV,CAAN;AACD;;AAED,QAAME,YAAYpB,KAAKqB,OAAL,CAAaC,QAAQC,GAAR,EAAb,EAA4BP,MAAMb,CAAN,CAAQ,CAAR,CAA5B,CAAlB;;AAEA,MAAI;AACFD,OAAGsB,UAAH,CAAcJ,SAAd,EAAyBlB,GAAGuB,SAAH,CAAaC,IAAtC;AACD,GAFD,CAEE,OAAOC,KAAP,EAAc;AACd;AACAC,YAAQC,GAAR,CAAY,WAAZ,EAAyBT,SAAzB;;AAEA,UAAM,IAAIF,KAAJ,CAAU,wEAAV,CAAN;AACD;;AAED,QAAMC,aAAaH,MAAMG,UAAzB;AACA,QAAMW,sBAAsB9B,KAAK+B,OAAL,CAAaZ,UAAb,EAAyBa,WAAzB,EAA5B;AACA,QAAMC,mBAAmBjC,KAAKqB,OAAL,CAAaC,QAAQC,GAAR,EAAb,EAA4BJ,UAA5B,CAAzB;;AAEA,MAAIc,oBAAoBA,qBAAqBb,SAA7C,EAAwD;AACtD,UAAM,IAAIF,KAAJ,CAAU,8CAAV,CAAN;AACD;;AAED,MAAIY,wBAAwB,KAAxB,IAAiC,CAACd,MAAMP,KAA5C,EAAmD;AACjD,UAAM,IAAIS,KAAJ,CAAU,sFAAV,CAAN;AACD;;AAED,SAAO,IAAP;AACD,CApDQ,EAqDRgB,MArDQ,GAsDR7B,IAtDL;;AAwDA,CAAC,CAACe,SAAD,EAAYD,UAAZ,KAA2B;AAC1B,QAAMgB,oBAAoBnC,KAAKqB,OAAL,CAAaC,QAAQC,GAAR,EAAb,EAA4BH,SAA5B,CAA1B;AACA,QAAMgB,qBAAqBpC,KAAKqB,OAAL,CAAaC,QAAQC,GAAR,EAAb,EAA4BJ,UAA5B,CAA3B;;AAEA;AACA,QAAMkB,UAAUpC,QAAQ,OAAR,CAAhB;;AAEA,QAAMqC,UAAUD,QAAQE,QAAR,CAAiBJ,iBAAjB,CAAhB;;AAEAG,UAAQE,SAAR,CAAkBJ,kBAAlB;AACD,CAVD,EAWI/B,KAAKF,CAAL,CAAO,CAAP,CAXJ,EAYIE,KAAKc,UAZT","file":"index.js","sourcesContent":["\n\nconst path = require('path');\nconst fs = require('fs');\nconst _ = require('lodash');\nconst yargs = require('yargs');\n\n\n\n\n\nconst argv = yargs\n    .usage('Usage: $0 <README.md> [options]')\n    .demand(1, 1, 'Gitdown program must be executed with exactly one non-option argument.')\n    .options({\n      force: {\n        default: false,\n        demand: false,\n        describe: 'Write to file with different extension than \".md\".',\n        type: 'boolean'\n      },\n      'output-file': {\n        demand: true,\n        describe: 'Path to the output file.',\n        type: 'string'\n      }\n    })\n    .example('$0 ./.README/README.md --output-file ./README.md')\n    .example('$0 ./.README/README.md --output-file ./README.txt --force')\n    .wrap(null)\n    .check((sargv) => {\n      if (!_.startsWith(sargv._[0], './')) {\n        throw new Error('Input file path must be a relative path. It must start with \"./\", e.g. \"./README\".');\n      }\n\n      if (!_.startsWith(sargv.outputFile, './')) {\n        throw new Error('Output file path must be a relative path. It must start with \"./\", e.g. \"./README\".');\n      }\n\n      const inputFile = path.resolve(process.cwd(), sargv._[0]);\n\n      try {\n        fs.accessSync(inputFile, fs.constants.W_OK);\n      } catch (error) {\n        // eslint-disable-next-line no-console\n        console.log('inputFile', inputFile);\n\n        throw new Error('Input file does not exist or cannot be written by the calling process.');\n      }\n\n      const outputFile = sargv.outputFile;\n      const outputFileExtension = path.extname(outputFile).toLowerCase();\n      const outputFileExists = path.resolve(process.cwd(), outputFile);\n\n      if (outputFileExists && outputFileExists === inputFile) {\n        throw new Error('Output file cannot overwrite the input file.');\n      }\n\n      if (outputFileExtension !== '.md' && !sargv.force) {\n        throw new Error('Cannot write into a file with an extension different than \".md\". Use --force option.');\n      }\n\n      return true;\n    })\n    .strict()\n    .argv;\n\n((inputFile, outputFile) => {\n  const resolvedInputFile = path.resolve(process.cwd(), inputFile);\n  const resolvedOutputFile = path.resolve(process.cwd(), outputFile);\n\n  // eslint-disable-next-line global-require\n  const Gitdown = require('./../');\n\n  const gitdown = Gitdown.readFile(resolvedInputFile);\n\n  gitdown.writeFile(resolvedOutputFile);\n})(\n    argv._[0],\n    argv.outputFile\n);\n"]}